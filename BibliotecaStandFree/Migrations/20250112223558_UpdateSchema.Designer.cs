// <auto-generated />
using System;
using BibliotecaStandFree.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BibliotecaStandFree.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250112223558_UpdateSchema")]
    partial class UpdateSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BibliotecaStandFree.Models.Carrito", b =>
                {
                    b.Property<string>("CarCodigo")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("carCodigo");

                    b.Property<decimal>("CarIva")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("carIva");

                    b.Property<string>("CarStatus")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("carStatus");

                    b.Property<decimal>("CarSubtotal")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("carSubtotal");

                    b.Property<decimal>("CarTotal")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("carTotal");

                    b.HasKey("CarCodigo");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.Carta", b =>
                {
                    b.Property<string>("CarCodigo")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("carCodigo");

                    b.Property<int>("CarCantidad")
                        .HasColumnType("int")
                        .HasColumnName("carCantidad");

                    b.Property<string>("CarDescripcion")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("carDescripcion");

                    b.Property<string>("CarFoto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("carFoto");

                    b.Property<string>("CarNombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("carNombre");

                    b.Property<decimal>("CarPrecio")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("carPrecio");

                    b.Property<string>("CarStatus")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("carStatus");

                    b.HasKey("CarCodigo");

                    b.ToTable("Cartas");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.CartaCategoria", b =>
                {
                    b.Property<string>("CarxcatCodigo")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("carxcatCodigo");

                    b.Property<string>("CarxcatNombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("carxcatNombre");

                    b.Property<string>("CarxcatStatus")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("carxcatStatus");

                    b.HasKey("CarxcatCodigo");

                    b.ToTable("CartaCategorias");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.CartaXCarrito", b =>
                {
                    b.Property<string>("CarCodigo")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("carCodigo");

                    b.Property<string>("CartaCodigo")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("cartaCodigo");

                    b.Property<int>("CarxcarCantidad")
                        .HasColumnType("int")
                        .HasColumnName("carxcarCantidad");

                    b.Property<int>("CarxcarId")
                        .HasColumnType("int")
                        .HasColumnName("carxcarId");

                    b.Property<decimal>("CarxcarTotal")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("carxcarTotal");

                    b.HasKey("CarCodigo", "CartaCodigo");

                    b.HasIndex("CartaCodigo");

                    b.ToTable("CartaXCarrito");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_envio");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("mensaje");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.Libro", b =>
                {
                    b.Property<string>("LibCodigo")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("libCodigo");

                    b.Property<string>("LibAutor")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("libAutor");

                    b.Property<int>("LibCantidad")
                        .HasColumnType("int")
                        .HasColumnName("libCantidad");

                    b.Property<DateTime>("LibFechaPublicacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("libFechaPublicacion");

                    b.Property<string>("LibFoto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libFoto");

                    b.Property<string>("LibNombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("libNombre");

                    b.Property<decimal?>("LibPrecio")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("libPrecio");

                    b.Property<string>("LibSinopsis")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libSinopsis");

                    b.Property<string>("LibStatus")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("libStatus");

                    b.Property<string>("LibURLLibro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libURLLibro");

                    b.Property<int>("LibVolumen")
                        .HasColumnType("int")
                        .HasColumnName("libVolumen");

                    b.HasKey("LibCodigo");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.LibroCategoria", b =>
                {
                    b.Property<string>("LibxcatCodigo")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("libxcatCodigo");

                    b.Property<string>("LibxcatNombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("libxcatNombre");

                    b.HasKey("LibxcatCodigo");

                    b.ToTable("LibroCategorias");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.LibrosXCarrito", b =>
                {
                    b.Property<string>("CarCodigo")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("carCodigo");

                    b.Property<string>("LibCodigo")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("libCodigo");

                    b.Property<int>("LibxcarCantidad")
                        .HasColumnType("int")
                        .HasColumnName("libxcarCantidad");

                    b.Property<int>("LibxcarId")
                        .HasColumnType("int")
                        .HasColumnName("libxcarId");

                    b.Property<decimal>("LibxcarTotal")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("libxcarTotal");

                    b.HasKey("CarCodigo", "LibCodigo");

                    b.HasIndex("LibCodigo");

                    b.ToTable("LibrosXCarrito");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.LibrosXLibreriaCategoria", b =>
                {
                    b.Property<string>("LibroId")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("libroId");

                    b.Property<string>("CategoriaId")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("categoriaId");

                    b.Property<int>("LibxlibcatId")
                        .HasColumnType("int")
                        .HasColumnName("libxlibcatId");

                    b.HasKey("LibroId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("LibrosXLibreriaCategorias");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.RelCartaCategoria", b =>
                {
                    b.Property<string>("CartaId")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("cartaId");

                    b.Property<string>("CategoriaId")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("categoriaId");

                    b.Property<int>("RelCartaCategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("relCartaCategoriaId");

                    b.HasKey("CartaId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("RelCartaCategorias");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateJoined");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastLogin");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UsuApellido")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("usuApellido");

                    b.Property<string>("UsuApodo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("usuApodo");

                    b.Property<DateTime?>("UsuFechaNacimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("usuFechaNacimiento");

                    b.Property<string>("UsuGenero")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("usuGenero");

                    b.Property<string>("UsuNombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("usuNombre");

                    b.Property<bool>("UsuPreferenciaAnuncios")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("usuPreferenciaAnuncios");

                    b.Property<string>("UsuStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("usuStatus");

                    b.Property<string>("UsuTelefono")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("usuTelefono");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.UsuarioXCarrito", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("usuarioId");

                    b.Property<string>("CarritoId")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("carritoId");

                    b.Property<DateTime>("UsuxcarFechaModificacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("usuxcarFechaModificacion");

                    b.Property<string>("UsuxcarStatus")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("usuxcarStatus");

                    b.HasKey("UsuarioId", "CarritoId");

                    b.HasIndex("CarritoId");

                    b.ToTable("UsuarioXCarritos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsuarioRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsuarioTokens", (string)null);
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.CartaXCarrito", b =>
                {
                    b.HasOne("BibliotecaStandFree.Models.Carrito", "Carrito")
                        .WithMany("CartaXCarritos")
                        .HasForeignKey("CarCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaStandFree.Models.Carta", "Carta")
                        .WithMany()
                        .HasForeignKey("CartaCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Carta");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.LibrosXCarrito", b =>
                {
                    b.HasOne("BibliotecaStandFree.Models.Carrito", "Carrito")
                        .WithMany("LibrosXCarritos")
                        .HasForeignKey("CarCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaStandFree.Models.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("LibCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.LibrosXLibreriaCategoria", b =>
                {
                    b.HasOne("BibliotecaStandFree.Models.LibroCategoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaStandFree.Models.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.RelCartaCategoria", b =>
                {
                    b.HasOne("BibliotecaStandFree.Models.Carta", "Carta")
                        .WithMany("RelCartaCategorias")
                        .HasForeignKey("CartaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaStandFree.Models.CartaCategoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carta");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.UsuarioXCarrito", b =>
                {
                    b.HasOne("BibliotecaStandFree.Models.Carrito", "Carrito")
                        .WithMany()
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaStandFree.Models.Usuario", "Usuario")
                        .WithMany("UsuarioXCarritos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BibliotecaStandFree.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BibliotecaStandFree.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaStandFree.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BibliotecaStandFree.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.Carrito", b =>
                {
                    b.Navigation("CartaXCarritos");

                    b.Navigation("LibrosXCarritos");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.Carta", b =>
                {
                    b.Navigation("RelCartaCategorias");
                });

            modelBuilder.Entity("BibliotecaStandFree.Models.Usuario", b =>
                {
                    b.Navigation("UsuarioXCarritos");
                });
#pragma warning restore 612, 618
        }
    }
}
