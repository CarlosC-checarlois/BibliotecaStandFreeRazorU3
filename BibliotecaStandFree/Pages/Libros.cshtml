@page
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model BibliotecaStandFree.Pages.LibrosModel
@{
    ViewData["Title"] = "Catálogo de Libros - Biblioteca Cafetería";
}

@section stylesheets_superiores {
    <link rel="stylesheet" href="~/css/styles.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script&display=swap" rel="stylesheet">
    <style>
        /* Estilo del Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8); /* Fondo oscuro */
            display: flex; /* Flexbox para centrar */
            justify-content: center; /* Centrar horizontalmente */
            align-items: center; /* Centrar verticalmente */
        }

        .modal-content-wrapper {
            max-width: 80%;
            max-height: 80%;
        }

        .modal-content {
            display: block;
            width: 100%;
            height: auto;
            border-radius: 10px;
        }

        .close {
            position: absolute;
            top: 20px;
            right: 30px;
            color: white;
            font-size: 30px;
            font-weight: bold;
            cursor: pointer;
        }

        .btn-wsp {
            position: fixed;
            width: 60px;
            height: 60px;
            bottom: 25px;
            right: 25px;
            background: #fff;
            color: #FFF;
            border-radius: 50%;
            text-align: center;
            font-size: 35px;
            box-shadow: 0px 1px 10px rgba(0, 0, 0, 0.3);
            z-index: 100;
            transition: all 300ms ease;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .btn-wsp:hover {
            background: #d0ffd9;
        }

        .btn-wsp img {
            width: 100%; /* Hace que la imagen ocupe todo el ancho del contenedor */
            height: 100%; /* Hace que la imagen ocupe toda la altura del contenedor */
            object-fit: cover; /* Ajusta la imagen para llenar completamente el contenedor sin distorsionar */
            border-radius: 50%; /* Mantiene el borde redondeado de la imagen */
        }

        @@media only screen and (min-width: 320px) and (max-width: 768px) {
        .btn-wsp {
            width: 63px;
            height: 63px;
        }

        .btn-wsp img {
            width: 100%; /* Ajusta el tamaño para que llene el nuevo tamaño del botón */
            height: 100%; /* Ajusta el tamaño para que llene el nuevo tamaño del botón */
        }
        }

    </style>
    <style>
        /* Contenedor del SpinBox */
        .spinbox-container {
            margin-top: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .spinbox-container label {
            font-size: 0.9rem;
            color: #333;
            margin-right: 10px;
        }

        /* Estilo del SpinBox */
        .spinbox {
            width: 60px;
            height: 35px;
            font-size: 1rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            text-align: center;
            transition: box-shadow 0.3s ease, border-color 0.3s ease;
        }

        .spinbox:focus {
            border-color: #a2c94e;
            box-shadow: 0 0 5px rgba(162, 201, 78, 0.5);
            outline: none;
        }
    </style>
    <style>
        /* Contenedor del carrito */
        .carrito-container {
            display: flex;
            align-items: center;
        }

        /* Texto del carrito (visible en pantallas pequeñas y medianas) */
        .carrito-texto {
            display: none; /* Oculto por defecto */
            font-size: 16px;
            text-decoration: none;
            color: #333;
        }

        /* Ícono del carrito (visible por defecto en pantallas grandes) */
        .carrito-icono {
            display: none; /* Oculto por defecto */
            align-items: center;
            text-decoration: none;
            color: #333;
            font-size: 20px;
            position: relative;
        }

        /* Media query para pantallas pequeñas y medianas (≤ 992px) */
        @@media (max-width: 992px) {
        .carrito-texto {
            display: inline-block; /* Mostrar texto */
        }

        .carrito-icono {
            display: none; /* Ocultar ícono */
        }
        }

        /* Media query para pantallas grandes (> 992px) */
        @@media (min-width: 993px) {
        .carrito-texto {
            display: inline-block;
        }

        .carrito-icono {
            display: none; /* Ocultar ícono */
        }
        }

        .table-hover tbody tr:hover {
            background-color: #f9f9f9;
        }

        .bg-secondary {
            background-color: #6c757d !important;
        }

        .bg-warning {
            background-color: #ffe8b6 !important;
        }

        .text-dark {
            color: #343a40 !important;
        }
    </style>
    <style>
        /* Contenedor de mensajes flotantes */
        .floating-messages-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            max-width: 320px;
            font-family: 'Georgia', serif; /* Fuente más amigable */
        }

        /* Estilo base para los mensajes */
        .floating-message {
            margin-bottom: 10px;
            padding: 15px;
            border-radius: 8px;
            font-size: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
            background: linear-gradient(to bottom, #fff9f0, #fff3e6); /* Fondo cálido */
            opacity: 0; /* Por defecto invisible */
            transform: translateY(-20px); /* Posición inicial para animación */
            transition: opacity 0.5s ease, transform 0.5s ease;
            border: 1px solid #d6ccc2; /* Borde suave */
        }


        /* Animación de entrada (fade-in) */
        .floating-message.fade-in {
            opacity: 1;
            transform: translateY(0); /* Volver a la posición original */
        }

        /* Animación de salida (fade-out) */
        .floating-message.fade-out {
            opacity: 0;
            transform: translateY(-20px); /* Desplazar hacia arriba al salir */
        }

        .floating-message-success {
            background: linear-gradient(to bottom, #fbeec1, #f5d19a); /* Gradiente cálido estilo cafetería */
            color: #5c3d2e; /* Texto en marrón oscuro */
            border: 1px solid #e5b887; /* Borde marrón suave */
            box-shadow: 0px 4px 6px rgba(92, 61, 46, 0.3); /* Sombra para dar profundidad */
        }

        /* Efecto hover para el mensaje de éxito */
        .floating-message-success:hover {
            background: linear-gradient(to bottom, #f5d19a, #fbeec1); /* Invertir el gradiente al pasar */
            box-shadow: 0px 6px 10px rgba(92, 61, 46, 0.5); /* Aumentar la sombra al pasar */
        }

        .floating-message-error {
            background: linear-gradient(to bottom, #fce4e4, #f8b8b8); /* Gradiente de tonos rosados suaves */
            color: #8b1e24; /* Texto en un rojo marrón oscuro */
            border: 1px solid #e78d8d; /* Borde rojo suave */
            box-shadow: 0px 4px 6px rgba(139, 30, 36, 0.3); /* Sombra para dar profundidad */
            font-family: 'Arial', sans-serif; /* Fuente profesional */
            padding: 15px;
            border-radius: 8px; /* Bordes más redondeados */
            animation: shake 0.3s ease-in-out; /* Animación de sacudida suave */
        }

        /* Hover Effect */
        .floating-message-error:hover {
            background: linear-gradient(to bottom, #f8b8b8, #fce4e4); /* Invertir gradiente al pasar */
            box-shadow: 0px 6px 10px rgba(139, 30, 36, 0.5); /* Aumentar la sombra */
        }

        .floating-message-warning {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }

        .floating-message-info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        /* Botón de cierre */
        .floating-message .close-btn {
            margin-left: 15px;
            color: inherit;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            line-height: 1;
            background: none;
            border: none;
        }

        .floating-message .close-btn:hover {
            opacity: 0.7;
        }

        @@keyframes shake {
            0%, 100% {
                transform: translateX(0);
            }
            25% {
                transform: translateX(-5px);
            }
            50% {
                transform: translateX(5px);
            }
            75% {
                transform: translateX(-5px);
            }
        }
    </style>
    <script src="~/js/modal.js"></script>
    <script src="https://kit.fontawesome.com/eb496ab1a0.js" crossorigin="anonymous"></script>
}

<section class="hscero">
    <video
        src="~/videos/Libros_Video.mp4"
        autoplay
        loop
        muted
        playsinline
        class="video-inicio"
        style="width: 100%; max-height: 500px; object-fit: cover; border-radius: 8px;">
    </video>
    <p class="p_hero">
        Te presentamos nuestro catálogo de libros. Explora una amplia variedad mientras disfrutas de un delicioso café.
    </p>
</section>

<section class="catalogo">
    <h2 class="vision_h2_span">Catálogo de Libros</h2>
    <p>Disfruta de nuestra selección especial de libros, perfectos para acompañar tus pedidos.</p>
    <div class="search-bar">
        <input type="text" id="search-input" placeholder="Buscar libro..." aria-label="Buscar libro" value="@Model.SearchQuery"/>
        <select id="search-type" aria-label="Tipo de búsqueda">
            <option value="nombre" selected="@(Model.SearchType == "nombre")">Nombre</option>
            <option value="precio" selected="@(Model.SearchType == "precio")">Precio</option>
            <option value="categoria" selected="@(Model.SearchType == "categoria")">Categoría</option>
        </select>
        <button id="search-button" onclick="handleSearch()">Buscar</button>
        <button id="reset-button" onclick="handleReset()">Restablecer</button>
    </div>

    <ul class="book-list">
        @if (Model.Libros != null && Model.Libros.Any())
        {
            foreach (var libro in Model.Libros)
            {
                <li class="book-item" data-libro-id="@libro.LibCodigo">
                    <img
                        src="~/images/libros/el_principito.png"
                        alt="@libro.LibNombre"
                        class="book-thumb"
                        style="width: 10%; height: 40%; padding-right: 2%;"
                        onclick="openModal('~/images/libros/el_principito.png')">
                    <div class="menu-details">
                        <h3>@libro.LibNombre</h3>
                        <p>@(libro.LibSinopsis?.Length > 70 ? libro.LibSinopsis.Substring(0, 70) + "..." : libro.LibSinopsis)</p>
                        <p><strong>Precio:</strong> $@libro.LibPrecio</p>
                        <div>
                            <label for="cantidad-@libro.LibCodigo">Cantidad:</label>
                            <input
                                id="cantidad-@libro.LibCodigo"
                                type="number"
                                value="1"
                                min="1"
                                max="@libro.LibCantidad"
                                class="spinbox"
                                style="width: 60px; margin-left: 5px;">
                        </div>
                        <div class="book-details">
                            <a asp-page="/DetalleLibros" asp-route-codigo="@libro.LibCodigo" class="boton">Ver más</a>
                            <button class="boton boton-comprar" onclick="addToCart('@libro.LibCodigo', @libro.LibCantidad)">Comprar</button>
                        </div>
                    </div>
                </li>
            }
        }
        else
        {
            <p class="no-products">No hay libros disponibles en este momento.</p>
        }
    </ul>
</section>

<div id="imageModal-standfree" class="modal">
    <span id="modal-close-btn" class="close" onclick="closeModal()">&times;</span>
    <div class="modal-content-wrapper">
        <img class="modal-content" id="expandedImage-standfree"/>
    </div>
</div>

@section stylesheets_inferiores {
    <script>
        async function addToCart(libroCodigo, maxCantidad) {
            const cantidadInput = document.getElementById(`cantidad-${libroCodigo}`);
            const cantidad = parseInt(cantidadInput.value);

            if (cantidad > maxCantidad) {
                alert("No puedes agregar más unidades de las disponibles.");
                return;
            }

            try {
                // Realizar la solicitud POST a la API
                const response = await fetch(`/api/carrito/agregar/${libroCodigo}/${cantidad}/libro`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                // Verificar si la respuesta fue exitosa
                if (response.ok) {
                    const data = await response.json();
                    alert(data.mensaje || "Producto añadido al carrito.");
                } else {
                    const errorData = await response.json();
                    alert(errorData.mensaje || "Error al agregar al carrito.");
                }
            } catch (error) {
                console.error("Error al agregar al carrito:", error);
                alert("Ocurrió un error al intentar agregar el producto al carrito.");
            }
        }
    </script>
    <script>

        // Función para abrir el modal con la imagen seleccionada
        function openModal(imageSrc) {
            const modal = document.getElementById('imageModal-standfree');
            const expandedImage = document.getElementById('expandedImage-standfree');
            expandedImage.src = imageSrc;
            modal.style.display = 'flex';
        }

        // Función para cerrar el modal
        function closeModal() {
            const modal = document.getElementById('imageModal-standfree');
            modal.style.display = 'none';
        }

        // Placeholder para el botón de Ver más
        function verMas() {
            alert('Función Ver más aún no implementada');
        }

        document.addEventListener("DOMContentLoaded", () => {
            const carritoTexto = document.querySelector(".carrito-texto");
            const carritoIcono = document.querySelector(".carrito-icono");

            function actualizarCarrito() {
                const anchoVentana = window.innerWidth;

                if (anchoVentana <= 550) {
                    carritoTexto.style.display = "none"; // Ocultar texto en pantallas muy pequeñas
                    carritoIcono.style.display = "flex"; // Mostrar ícono
                } else if (anchoVentana > 550 && anchoVentana <= 992) {
                    carritoTexto.style.display = "inline-block"; // Mostrar texto en pantallas medianas
                    carritoIcono.style.display = "none"; // Ocultar ícono
                } else {
                    carritoTexto.style.display = "inline-block"; // Mostrar texto en pantallas grandes
                    carritoIcono.style.display = "none"; // Ocultar ícono
                }
            }

            // Ejecutar al cargar la página
            actualizarCarrito();

            // Ejecutar al redimensionar la ventana
            window.addEventListener("resize", actualizarCarrito);
        });

        document.addEventListener("DOMContentLoaded", () => {
            const searchInput = document.getElementById("search-input");
            const searchButton = document.getElementById("search-button");
            const resetButton = document.getElementById("reset-button");

            // Inicializar estado de los botones
            updateButtonVisibility();

            // Función para actualizar la visibilidad del botón "Restablecer"
            function updateButtonVisibility() {
                if (searchInput.value.trim() !== "") {
                    resetButton.style.display = "inline-block"; // Mostrar "Restablecer"
                } else {
                    resetButton.style.display = "none"; // Ocultar "Restablecer"
                }
            }

            // Evento para el input de búsqueda
            searchInput.addEventListener("input", updateButtonVisibility);

            // Manejador del botón "Buscar"
            window.handleSearch = () => {
                const query = searchInput.value.trim();
                const type = document.getElementById("search-type").value;

                if (query) {
                    const url = `${window.location.pathname}?search=${query}&type=${type}`;
                    window.location.href = url; // Redirigir con parámetros de búsqueda
                }
            };

            // Manejador del botón "Restablecer"
            window.handleReset = () => {
                searchInput.value = ""; // Limpiar el input
                resetButton.style.display = "none"; // Ocultar "Restablecer"
                window.location.href = window.location.pathname; // Recargar sin filtros
            };
        });
    </script>
    <script src="~/js/main.js"></script>
    <script src="~/js/modal.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const floatingMessages = document.querySelectorAll(".floating-message");

            floatingMessages.forEach((message) => {
                // Animación de entrada (fade-in) al cargar el mensaje
                setTimeout(() => {
                    message.classList.add("fade-in");
                }, 100); // Retraso mínimo para garantizar que la animación se vea

                // Animación de salida (fade-out) después de 3 segundos
                setTimeout(() => {
                    message.classList.remove("fade-in");
                    message.classList.add("fade-out"); // Aplicar clase de salida

                    // Eliminar completamente el mensaje después de la animación de salida
                    setTimeout(() => {
                        message.remove();
                    }, 500); // 500 ms coincide con la duración de la transición CSS
                }, 3000); // Mostrar el mensaje durante 3 segundos antes de iniciar la salida
            });
        });
    </script>

}