@page
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model BibliotecaStandFree.Pages.CarritoModel
@{
    ViewData["Title"] = "Carrito de Compras - BibliotecaStand";
}

@section stylesheets_superiores {

    <link rel="stylesheet" href="~/css/styles.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script&display=swap" rel="stylesheet">
    <style>
    .table-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    .table {
        background-color: #ffffff;
    }

    .btn-wsp {
        position: fixed;
        width: 60px;
        height: 60px;
        bottom: 25px;
        right: 25px;
        background: #fff;
        color: #FFF;
        border-radius: 50%;
        text-align: center;
        font-size: 35px;
        box-shadow: 0px 1px 10px rgba(0, 0, 0, 0.3);
        z-index: 100;
        transition: all 300ms ease;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .btn-wsp:hover {
        background: #d0ffd9;
    }

    .btn-wsp img {
        width: 100%; /* Hace que la imagen ocupe todo el ancho del contenedor */
        height: 100%; /* Hace que la imagen ocupe toda la altura del contenedor */
        object-fit: cover; /* Ajusta la imagen para llenar completamente el contenedor sin distorsionar */
        border-radius: 50%; /* Mantiene el borde redondeado de la imagen */
    }

    @@media only screen and (min-width: 320px) and (max-width: 768px) {
    .btn-wsp {
        width: 63px;
        height: 63px;
    }

    .btn-wsp img {
        width: 100%; /* Ajusta el tamaño para que llene el nuevo tamaño del botón */
        height: 100%; /* Ajusta el tamaño para que llene el nuevo tamaño del botón */
    }
    }

</style>
    <style>
    /* Contenedor del carrito */
    .carrito-container {
        display: flex;
        align-items: center;
    }

    /* Texto del carrito (visible en pantallas pequeñas y medianas) */
    .carrito-texto {
        display: none; /* Oculto por defecto */
        font-size: 16px;
        text-decoration: none;
        color: #333;
    }

    /* Ícono del carrito (visible por defecto en pantallas grandes) */
    .carrito-icono {
        display: none; /* Oculto por defecto */
        align-items: center;
        text-decoration: none;
        color: #333;
        font-size: 20px;
        position: relative;
    }

    /* Media query para pantallas pequeñas y medianas (≤ 992px) */
    @@media (max-width: 992px) {
    .carrito-texto {
        display: inline-block; /* Mostrar texto */
    }

    .carrito-icono {
        display: none; /* Ocultar ícono */
    }
    }

    /* Media query para pantallas grandes (> 992px) */
    @@media (min-width: 993px) {
    .carrito-texto {
        display: inline-block;
    }

    .carrito-icono {
        display: none; /* Ocultar ícono */
    }
    }

    .table-hover tbody tr:hover {
        background-color: #f9f9f9;
    }

    .bg-secondary {
        background-color: #6c757d !important;
    }

    .bg-warning {
        background-color: #ffe8b6 !important;
    }

    .text-dark {
        color: #343a40 !important;
    }
</style>
    <style>
    /* Contenedor de mensajes flotantes */
    .floating-messages-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        max-width: 320px;
        font-family: 'Georgia', serif; /* Fuente más amigable */
    }

    /* Estilo base para los mensajes */
    .floating-message {
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 8px;
        font-size: 15px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        background: linear-gradient(to bottom, #fff9f0, #fff3e6); /* Fondo cálido */
        opacity: 0; /* Por defecto invisible */
        transform: translateY(-20px); /* Posición inicial para animación */
        transition: opacity 0.5s ease, transform 0.5s ease;
        border: 1px solid #d6ccc2; /* Borde suave */
    }


    /* Animación de entrada (fade-in) */
    .floating-message.fade-in {
        opacity: 1;
        transform: translateY(0); /* Volver a la posición original */
    }

    /* Animación de salida (fade-out) */
    .floating-message.fade-out {
        opacity: 0;
        transform: translateY(-20px); /* Desplazar hacia arriba al salir */
    }

    .floating-message-success {
        background: linear-gradient(to bottom, #fbeec1, #f5d19a); /* Gradiente cálido estilo cafetería */
        color: #5c3d2e; /* Texto en marrón oscuro */
        border: 1px solid #e5b887; /* Borde marrón suave */
        box-shadow: 0px 4px 6px rgba(92, 61, 46, 0.3); /* Sombra para dar profundidad */
    }

    /* Efecto hover para el mensaje de éxito */
    .floating-message-success:hover {
        background: linear-gradient(to bottom, #f5d19a, #fbeec1); /* Invertir el gradiente al pasar */
        box-shadow: 0px 6px 10px rgba(92, 61, 46, 0.5); /* Aumentar la sombra al pasar */
    }

    .floating-message-error {
        background: linear-gradient(to bottom, #fce4e4, #f8b8b8); /* Gradiente de tonos rosados suaves */
        color: #8b1e24; /* Texto en un rojo marrón oscuro */
        border: 1px solid #e78d8d; /* Borde rojo suave */
        box-shadow: 0px 4px 6px rgba(139, 30, 36, 0.3); /* Sombra para dar profundidad */
        font-family: 'Arial', sans-serif; /* Fuente profesional */
        padding: 15px;
        border-radius: 8px; /* Bordes más redondeados */
        animation: shake 0.3s ease-in-out; /* Animación de sacudida suave */
    }

    /* Hover Effect */
    .floating-message-error:hover {
        background: linear-gradient(to bottom, #f8b8b8, #fce4e4); /* Invertir gradiente al pasar */
        box-shadow: 0px 6px 10px rgba(139, 30, 36, 0.5); /* Aumentar la sombra */
    }

    .floating-message-warning {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
    }

    .floating-message-info {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }

    /* Botón de cierre */
    .floating-message .close-btn {
        margin-left: 15px;
        color: inherit;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        line-height: 1;
        background: none;
        border: none;
    }

    .floating-message .close-btn:hover {
        opacity: 0.7;
    }

    @@keyframes shake {
        0%, 100% {
            transform: translateX(0);
        }
        25% {
            transform: translateX(-5px);
        }
        50% {
            transform: translateX(5px);
        }
        75% {
            transform: translateX(-5px);
        }
    }
</style>
    <script src="https://kit.fontawesome.com/eb496ab1a0.js" crossorigin="anonymous"></script>
}

<br>
<br>
<main class="container py-4">
    <h1 class="text-center mb-4 vision_h1_span">Carrito de Compras</h1>

    @if (Model.Carrito != null && Model.Carrito.Any())
    {
        <!-- Tabla del Carrito -->
        <div class="table-container">
            <table class="table table-striped table-hover">
                <thead class="table-dark text-center">
                <tr>
                    <th>Producto</th>
                    <th>Precio Unitario</th>
                    <th>Cantidad</th>
                    <th>Subtotal (con IVA)</th>
                    <th>Acción</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var producto in Model.Carrito)
                {
                    <tr class="carrito-item" data-id="@producto.Id" data-precio="@producto.Precio" data-cantidad="@producto.Cantidad">
                        <td class="align-middle">
                            <div class="d-flex align-items-center">
                                <span>@producto.Nombre</span>
                            </div>
                        </td>
                        <td class="text-center align-middle">$@producto.Precio.ToString("F2")</td>
                        <td class="text-center align-middle">@producto.Cantidad</td>
                        <td class="text-center align-middle subtotal-column">
                            $<span class="subtotal">0.00</span>
                        </td>
                        <td>
                            <form method="post" asp-page-handler="Eliminar">
                                <input type="hidden" name="id" value="@producto.Id"/>
                                <input type="hidden" name="tipo" value="@producto.Tipo"/>
                                <button type="submit" class="btn btn-danger">Eliminar</button>
                            </form>
                        </td>
                    </tr>
                }
                </tbody>
                <tfoot>
                <tr class="table-secondary">
                    <td colspan="3" class="text-end">
                        <strong>Total del Carrito:</strong>
                    </td>
                    <td class="text-center">
                        <strong>$<span id="total-carrito">0.00</span></strong>
                    </td>
                    <td></td>
                </tr>
                </tfoot>
            </table>
        </div>

        @if (User.Identity != null && User.Identity.IsAuthenticated)
        {
            <form method="post" asp-page-handler="FinalizarCompra">
                <button type="submit" class="btn btn-success">Finalizar Compra</button>
            </form>
        }
        else
        {
            <a asp-page="/Login" class="btn btn-primary">Iniciar Sesión para Comprar</a>
        }
    }
    else
    {
        <p class="text-center fs-4 vision_h3_span">Tu carrito está vacío.</p>
    }
</main>

@section stylesheets_inferiores {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const carritoItems = document.querySelectorAll(".carrito-item");
            const totalCarritoElement = document.getElementById("total-carrito");
            let totalCarrito = 0;

            carritoItems.forEach((item) => {
                // Obtener datos del producto
                const precio = parseFloat(item.dataset.precio);
                const cantidad = parseInt(item.dataset.cantidad);

                // Calcular el subtotal (sin aplicar IVA aquí)
                const subtotal = precio * cantidad;
                totalCarrito += subtotal;

                // Actualizar el subtotal en el HTML
                const subtotalElement = item.querySelector(".subtotal");
                if (subtotalElement) {
                    subtotalElement.textContent = subtotal.toFixed(2); // Mostrar subtotal con dos decimales
                }
            });

            // Actualizar el total en el HTML
            if (totalCarritoElement) {
                totalCarritoElement.textContent = totalCarrito.toFixed(2);
            }
        });


        document.addEventListener("DOMContentLoaded", () => {
            const carritoTexto = document.querySelector(".carrito-texto");
            const carritoIcono = document.querySelector(".carrito-icono");

            function actualizarCarrito() {
                const anchoVentana = window.innerWidth;

                if (anchoVentana <= 550) {
                    carritoTexto.style.display = "none"; // Ocultar texto en pantallas muy pequeñas
                    carritoIcono.style.display = "flex"; // Mostrar ícono
                } else if (anchoVentana > 550 && anchoVentana <= 992) {
                    carritoTexto.style.display = "inline-block"; // Mostrar texto en pantallas medianas
                    carritoIcono.style.display = "none"; // Ocultar ícono
                } else {
                    carritoTexto.style.display = "inline-block"; // Mostrar texto en pantallas grandes
                    carritoIcono.style.display = "none"; // Ocultar ícono
                }
            }

            // Ejecutar al cargar la página
            actualizarCarrito();

            // Ejecutar al redimensionar la ventana
            window.addEventListener("resize", actualizarCarrito);
        });
    </script>
    <script>
    async function eliminarDelCarrito(productoId, tipoProducto) {
        const confirmacion = confirm("¿Seguro que deseas eliminar este producto del carrito?");
        if (!confirmacion) return;

        try {
            const response = await fetch(`/api/carrito/eliminar/${productoId}/${tipoProducto}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                alert(data.mensaje || "Producto eliminado del carrito.");
                location.reload(); // Recargar la página para reflejar los cambios
            } else {
                const errorData = await response.json();
                alert(errorData.mensaje || "Error al eliminar el producto del carrito.");
            }
        } catch (error) {
            console.error("Error al eliminar del carrito:", error);
            alert("Ocurrió un error al intentar eliminar el producto del carrito.");
        }
    }
</script>
    <script src="~/js/main.js"></script>
    <script src="~/js/modal.js"></script>
}